<nav class="bg-white border-b">
    <div class="max-w-[90rem] mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16 items-center">
            <div class="flex items-center">
                <a href="/" class="text-xl font-bold text-[#FC4308]">
                    G News
                </a>
            </div>
            <div class="hidden md:flex items-center space-x-8">
                <a href="/trend" class="<%= (currentPath.startsWith('/trend')) ? 'text-[#FC4308]' : 'text-gray-600 hover:text-gray-900' %>">Xu Hướng</a>
                <a href="/newest" class="<%= (currentPath.startsWith('/newest')) ? 'text-[#FC4308]' : 'text-gray-600 hover:text-gray-900' %>">Mới Nhất</a>
                <% if (typeof user !== 'undefined' && user) { %>
                    <% if (user.role === 'editor') { %>
                        <a href="/editor" class="<%= (currentPath.startsWith('/editor')) ? 'text-[#FC4308]' : 'text-gray-600 hover:text-gray-900' %>">Bài Chờ Duyệt</a>
                    <% } %>
                    <% if (user.role === 'author') { %>
                        <a href="/my-articles" class="<%= (currentPath.startsWith('/my-articles')) ? 'text-[#FC4308]' : 'text-gray-600 hover:text-gray-900' %>">Bài Viết Của Tôi</a>
                    <% } %>
                    <% if (user.role === 'admin') { %>
                        <a href="/manage-users/ban-users" class="<%= (currentPath.startsWith('/manage-user')) ? 'text-[#FC4308]' : 'text-gray-600 hover:text-gray-900' %>">Người Dùng</a>
                        <a href="/manage-categories" class="<%= (currentPath.startsWith('/manage-categories')) ? 'text-[#FC4308]' : 'text-gray-600 hover:text-gray-900' %>">Chuyên mục</a>
                        <a href="/manage-tags" class="<%= (currentPath.startsWith('/manage-tags')) ? 'text-[#FC4308]' : 'text-gray-600 hover:text-gray-900' %>">Nhãn</a>
                    <% } %>
                <% } %>
            </div>            
            <div class="flex items-center space-x-4">
                <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </div>
                    <div class="group">
                            <form action="/search" method="GET" class="relative">
                                <input type="text" name="q"
                                    class="block xl:w-96 lg:w-80 pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-gray-50 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-primary focus:border-primary sm:text-sm"
                                    placeholder="Tìm kiếm" required>
                                <button type="submit" class="absolute inset-y-0 left-3 flex items-center">
                                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                                    </svg>
                                </button>
                            </form>

                        <!-- Change hidden to invisible and add group-focus-within:visible -->
                        <div
                            class="invisible group-focus-within:visible absolute w-full mt-2 bg-white border border-gray-200 rounded-md shadow-lg z-50">
                            <div class="p-3">
                                <div class="flex flex-row justify-between">
                                    <p class="text-sm text-cyan-600 mb-2">Tìm nhãn #</p>
                                    <div class="flex flex-row text-sm mb-2">
                                        <button
                                            class="tag-prev text-black p-1 disabled:cursor-not-allowed disabled:text-gray-400"
                                            id="prevBtn">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24"
                                                fill="none" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M15 19l-7-7 7-7"></path>
                                            </svg>
                                        </button>
                                        <button
                                            class="tag-next text-black p-1 disabled:cursor-not-allowed disabled:text-gray-400"
                                            id="nextBtn">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24"
                                                fill="none" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M9 5l7 7-7 7"></path>
                                            </svg>
                                        </button>
                                    </div>
                                </div>

                                <!-- Tag Groups -->
                                <div class="tag-groups overflow-hidden h-[120px]">
                                    <div class="flex flex-wrap gap-2 w-full">
                                        <% const tagsPerSet=8; const numberOfSets=Math.ceil(tags.length / tagsPerSet);
                                            for(let i=0; i < numberOfSets; i++) {%>
                                            <div class="flex w-full">
                                                <div class="w-full flex flex-wrap gap-4">
                                                    <div class="tag-group flex flex-wrap w-full gap-2">
                                                        <% const startIdx=i * tagsPerSet; const endIdx=Math.min(startIdx
                                                            + tagsPerSet, tags.length); for(let j=startIdx; j < endIdx;
                                                            j++) { %>
                                                            <a href="/tags/<%= tags[j].name %>"
                                                                class="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded-full text-gray-700 transition-colors">
                                                                #<%= tags[j].name %>
                                                            </a>
                                                            <% } %>
                                                    </div>
                                                </div>
                                            </div>
                                            <% } %>
                                    </div>
                                </div>
                                <!-- End tag -->
                            </div>
                        </div>
                        <!-- End -->
                    </div>
                </div>
                <div class="lg:space-x-2">
                    <% if (locals.user) { %>
                        <div class="relative" x-data="{ open: false }">
                            <div class="flex items-center space-x-2 cursor-pointer" @click="open = !open">
                                <img src="https://ui-avatars.com/api/?name=<%= user.name %>&background=random&color=fff&size=40&font-size=0.5"
                                    alt="User avatar" class="w-8 h-8 rounded-full">
                                <span class="text-gray-600">
                                    <%= user.name %>
                                </span>
                            </div>
                            <!-- Dropdown Menu with click toggle -->
                            <div x-show="open" @click.away="open = false" x-transition:enter="transition ease-out duration-200"
                                x-transition:enter-start="opacity-0 scale-95" x-transition:enter-end="opacity-100 scale-100"
                                class="absolute right-0 mt-1 pt-2 w-48 z-50 bg-white rounded-lg shadow-lg">
                                <a href="/profile" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Hồ sơ</a>
                                <form action="/auth/logout" method="POST" class="m-0 p-0">
                                    <button type="submit" class="block w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100">
                                        Đăng xuất
                                    </button>
                                </form>
                            </div>
                        </div>
                        <% } else { %>
                            <a href="/auth/login" class="text-gray-600 hover:text-gray-900">Đăng nhập</a>
                            <a href="/auth/register" class="text-gray-600 hover:text-gray-900">Đăng ký</a>
                            <% } %>
                </div>
            </div>
        </div>
    </div>
</nav>

<script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const tagGroups = document.querySelectorAll('.tag-group');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const dropdownContainer = document.querySelector('.group-focus-within\\:visible');
        const searchInput = document.querySelector('input[type="text"]');
        let currentSet = 0;

        // Hide all tag groups initially except first one
        tagGroups.forEach((group, index) => {
            group.style.display = index === 0 ? 'flex' : 'none';
        });

        function updateButtons() {
            // Update button states
            prevBtn.disabled = currentSet === 0;
            nextBtn.disabled = currentSet === tagGroups.length - 1;

            // Show/hide tag groups
            tagGroups.forEach((group, index) => {
                group.style.display = index === currentSet ? 'flex' : 'none';
            });
        }

        // Keep focus on input when clicking inside dropdown
        dropdownContainer.addEventListener('mousedown', (e) => {
            e.preventDefault();
            e.stopPropagation();
        });

        // Handle navigation buttons
        nextBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            if (currentSet < tagGroups.length - 1) {
                currentSet++;
                updateButtons();
            }
            searchInput.focus(); // Maintain focus
        });

        prevBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            if (currentSet > 0) {
                currentSet--;
                updateButtons();
            }
            searchInput.focus(); // Maintain focus
        });

        // Initialize button states
        updateButtons();
    });
</script>